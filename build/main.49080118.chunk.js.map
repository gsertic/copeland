{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["client","config","configureEditorPanel","name","type","source","allowMultiple","addTreemapModule","Highcharts","App","useConfig","sigmaData","useElementData","ref","useRef","options","useMemo","dimensions","dimension","measures","dataMap","delim","getParent","i","j","getId","parent","id","length","value","dataPoint","data","key","title","text","undefined","chart","height","window","innerHeight","backgroundColor","plotOptions","series","animation","levels","level","colorByPoint","borderWidth","levelIsConstant","dataLabels","enabled","align","verticalAlign","style","fontSize","fontWeight","allowDrillToNode","layoutAlgorithm","_jsx","children","HighchartsReact","highcharts","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"yOAOAA,SAAOC,OAAOC,qBAAqB,CACjC,CAAEC,KAAM,SAAUC,KAAM,WACxB,CAAED,KAAM,YAAaC,KAAM,SAAUC,OAAQ,SAAUC,eAAe,GACtE,CAAEH,KAAM,WAAYC,KAAM,SAAUC,OAAQ,SAAUC,eAAe,KAGvEC,IAAiBC,KA2GFC,MAzGf,WACE,MAAMR,EAASS,sBACTC,EAAYC,yBAAeX,EAAOI,QAClCQ,EAAMC,mBACNC,EAAUC,mBAAQ,KACtB,MAAMC,EAAahB,EAAOiB,UACpBC,EAAWlB,EAAOkB,SACxB,IAAMF,IAAcE,EAAW,OAAO,EAGtC,IAAIC,EAAU,GACd,MAAMC,EAAQ,KACd,SAASC,EAAUC,EAAGC,GACpB,OAAID,EAAI,EACCE,EAAMF,EAAI,EAAGC,QAEpB,CAEJ,CACA,SAASC,EAAMF,EAAGC,GAChB,MAAME,EAASJ,EAAUC,EAAGC,GAC5B,IAAIG,EAAK,GAKT,OAJID,IACFC,EAAKD,EAASL,GAEhBM,GAAMV,EAAWM,GAAKF,EAAQV,EAAUM,EAAWM,IAAIC,GAChDG,CACT,CACA,GAAa,OAAThB,QAAS,IAATA,KAAYM,EAAW,IAAK,CAC9B,IAAK,IAAIM,EAAI,EAAGA,EAAIN,EAAWW,OAAQL,IACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIb,EAAUM,EAAWM,IAAIK,OAAQJ,IAAK,CACxD,MAAMrB,EAAOQ,EAAUM,EAAWM,IAAIC,GAChCK,EAAQlB,EAAUQ,EAASI,IAAIC,GAC/BG,EAAKF,EAAMF,EAAGC,GACdE,EAASJ,EAAUC,EAAGC,GACtBM,EAAY,CAChBH,KACAxB,OACA0B,WACIH,GAAU,CAAEA,WAElBN,EAAQO,GAAMG,CAChB,CAGF,IAAIC,EAAO,GACPR,EAAI,EACR,IAAK,IAAIS,KAAOZ,EACdW,EAAKR,GAAKH,EAAQY,GAClBT,IA6CF,MA1CgB,CACdU,MAAO,CACLC,UAAMC,GAERC,MAAO,CACLC,OAAQC,OAAOC,YACfC,gBAAiB,eAEnBC,YAAa,CACXC,OAAQ,CACJC,WAAW,IAGjBD,OAAQ,CACN,CACEE,OAAQ,CACN,CACEC,MAAO,EACPC,cAAc,EACdC,YAAa,EACbC,iBAAiB,EACjBC,WAAY,CACVC,SAAS,EACTC,MAAO,OACPC,cAAe,MACfC,MAAO,CACLC,SAAU,OACVC,WAAY,WAKpBnD,KAAM,UACNoD,kBAAkB,EAClBC,gBAAiB,aACjBR,WAAY,CACVC,SAAS,GAEXnB,KAAMA,IAKd,IACC,CAAC9B,EAAQU,IAEZ,OACE+C,cAAA,OAAAC,SACG5C,GAAW2C,cAACE,IAAe,CAACC,WAAYrD,IAAYO,QAASA,EAASF,IAAKA,KAGlF,EC1GiBiD,MAZOC,IAChBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EAAY,GAExB,ECHJS,IAASC,OACPf,cAACgB,IAAMC,WAAU,CAAAhB,SACfD,cAACjD,EAAG,MAENmE,SAASC,eAAe,SAM1Bf,G","file":"static/js/main.49080118.chunk.js","sourcesContent":["import { useMemo, useRef } from \"react\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport addTreemapModule from \"highcharts/modules/treemap\";\r\nimport { client, useConfig, useElementData } from \"@sigmacomputing/plugin\";\r\n//npm install highcharts highcharts-react-official\r\n\r\nclient.config.configureEditorPanel([\r\n  { name: \"source\", type: \"element\" },\r\n  { name: \"dimension\", type: \"column\", source: \"source\", allowMultiple: true },\r\n  { name: \"measures\", type: \"column\", source: \"source\", allowMultiple: true },\r\n]);\r\n\r\naddTreemapModule(Highcharts);\r\n\r\nfunction App() {\r\n  const config = useConfig();\r\n  const sigmaData = useElementData(config.source);\r\n  const ref = useRef();\r\n  const options = useMemo(() => {\r\n    const dimensions = config.dimension;\r\n    const measures = config.measures;\r\n    if (!(dimensions && measures)) return false;\r\n\r\n    // transform sigmaData --> treemap data\r\n    let dataMap = [];\r\n    const delim = \"__\";\r\n    function getParent(i, j) {\r\n      if (i > 0) {\r\n        return getId(i - 1, j);\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n    function getId(i, j) {\r\n      const parent = getParent(i, j);\r\n      let id = \"\";\r\n      if (parent) {\r\n        id = parent + delim;\r\n      }\r\n      id += dimensions[i] + delim + sigmaData[dimensions[i]][j];\r\n      return id;\r\n    }\r\n    if (sigmaData?.[dimensions[0]]) {\r\n      for (let i = 0; i < dimensions.length; i++) {\r\n        for (let j = 0; j < sigmaData[dimensions[i]].length; j++) {\r\n          const name = sigmaData[dimensions[i]][j];\r\n          const value = sigmaData[measures[i]][j];\r\n          const id = getId(i, j);\r\n          const parent = getParent(i, j);\r\n          const dataPoint = {\r\n            id,\r\n            name,\r\n            value,\r\n            ...(parent && { parent }),\r\n          };\r\n          dataMap[id] = dataPoint;\r\n        }\r\n      }\r\n      // convert object map to array\r\n      let data = [];\r\n      let i = 0;\r\n      for (var key in dataMap) {\r\n        data[i] = dataMap[key];\r\n        i++;\r\n      }\r\n\r\n      const options = {\r\n        title: {\r\n          text: undefined,\r\n        },\r\n        chart: {\r\n          height: window.innerHeight,\r\n          backgroundColor: \"transparent\",\r\n        },\r\n        plotOptions: {\r\n          series: {\r\n              animation: false\r\n          }\r\n        },\r\n        series: [\r\n          {\r\n            levels: [\r\n              {\r\n                level: 1,\r\n                colorByPoint: true,\r\n                borderWidth: 6,\r\n                levelIsConstant: false,\r\n                dataLabels: {\r\n                  enabled: true,\r\n                  align: \"left\",\r\n                  verticalAlign: \"top\",\r\n                  style: {\r\n                    fontSize: \"14px\",\r\n                    fontWeight: \"bold\",\r\n                  },\r\n                },\r\n              },\r\n            ],\r\n            type: \"treemap\",\r\n            allowDrillToNode: true,\r\n            layoutAlgorithm: \"squarified\",\r\n            dataLabels: {\r\n              enabled: true,\r\n            },\r\n            data: data,\r\n          },\r\n        ],\r\n      };\r\n      return options;\r\n    }\r\n  }, [config, sigmaData]);\r\n\r\n  return (\r\n    <div>\r\n      {options && <HighchartsReact highcharts={Highcharts} options={options} ref={ref} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n        getCLS(onPerfEntry);\r\n        getFID(onPerfEntry);\r\n        getFCP(onPerfEntry);\r\n        getLCP(onPerfEntry);\r\n        getTTFB(onPerfEntry);\r\n      });\r\n    }\r\n  };\r\n  \r\n  export default reportWebVitals;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}